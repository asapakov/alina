import * as React from 'react';import Table from '@mui/material/Table';import TableBody from '@mui/material/TableBody';import TableCell from '@mui/material/TableCell';import TableContainer from '@mui/material/TableContainer';import TableHead from '@mui/material/TableHead';import TableRow from '@mui/material/TableRow';import Paper from '@mui/material/Paper';import {deleteFromLs, getRequestFromLs} from "../../../../store/localStorage";import {TablePagination} from "@mui/material";import {useTranslation} from "react-i18next";import remove from '../../../../assets/images/delete.svg';import {useEffect, useState} from "react";interface Column {    id: 'id' | 'fullName' | 'phone' | 'type' | 'date' | 'value' | 'city' | 'call' | 'remove' ;    label: string;    minWidth?: number;    align?: 'right';    format?: (value: any) => any;}const columns: readonly Column[] = [    { id: 'id', label: 'ID', minWidth: 30 },    { id: 'fullName', label: 'ФИО', minWidth: 30 },    {        id: 'phone',        label: 'Номер телефона',        minWidth: 30,        align: 'right',        format: (value: number) => value,    },    {        id: 'type',        label: 'Тип заявки',        minWidth: 50,        align: 'right',        format: (value: string) => value,    },    {        id: 'date',        label: 'Дата',        minWidth: 80,        align: 'right',        format: (value: any) => value.split('T')[0],    },    {        id: 'value',        label: 'Кол-во',        minWidth: 50,        align: 'right',        format: (value: number) => value.toString(),    },    {        id: 'city',        label: 'Город',        minWidth: 80,        align: 'right',        format: (value: string) => value,    },    {        id: 'call',        label: 'Звонок',        minWidth: 80,        align: 'right',        format: (value: boolean) => value ? 'Да' : 'Нет',    },    {        id: 'remove',        label: ' ',        minWidth: 30,        align: 'right',        format: () => <img style={{cursor: 'pointer'}} src={remove} alt="remove"/>,    },];const TableComponent = () => {    const [rows, setRows] = useState([]);    const { t } = useTranslation();    const [page, setPage] = React.useState(0);    const [rowsPerPage, setRowsPerPage] = React.useState(10);    const handleChangePage = (event: unknown, newPage: number) => {        setPage(newPage);    };    const handleRemove = (id: number) => {        if (confirm('Уверены?')) {            deleteFromLs(id);            setRows(rows.filter((r) => r.id !== id));        }    }    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {        setRowsPerPage(+event.target.value);        setPage(0);    };    useEffect(() => {        setRows(getRequestFromLs());    }, [])    return (        <Paper sx={{ width: '100%', overflow: 'hidden' }}>            <TableContainer sx={{ maxHeight: 440 }}>                <Table stickyHeader aria-label="sticky table">                    <TableHead>                        <TableRow>                            {columns.map((column) => (                                <TableCell                                    key={column.id}                                    align={column.align}                                    style={{ minWidth: column.minWidth }}                                >                                    {column.label}                                </TableCell>                            ))}                        </TableRow>                    </TableHead>                    <TableBody>                        {rows                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)                            .map((row) => {                                return (                                    <TableRow hover role="checkbox" tabIndex={-1} key={row.id}>                                        {columns.map((column) => {                                            const value = row[column.id];                                            return (                                                <TableCell onClick={column.id === 'remove' ? () => handleRemove(row.id) : null} key={column.id} align={column.align}>                                                    { column.format ? column.format(t(value)) : t(value)}                                                </TableCell>                                            );                                        })}                                    </TableRow>                                );                            })}                    </TableBody>                </Table>            </TableContainer>            <TablePagination                rowsPerPageOptions={[10, 25, 100]}                component="div"                count={rows.length}                rowsPerPage={rowsPerPage}                page={page}                onPageChange={handleChangePage}                onRowsPerPageChange={handleChangeRowsPerPage}            />        </Paper>    )}export default TableComponent;